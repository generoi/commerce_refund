<?php

/**
 * Refresh the fields attached to the message types we support.
 *
 * @see commerce_message_message_field_refresh().
 */
function commerce_refund_field_refresh() {
  // Create an order entityreference field on the commerce_order entity type.
  $fields[COMMERCE_REFUND_ORDER_FIELD]['field'] = array(
    'type' => 'entityreference',
    'module' => 'entityreference',
    'locked' => FALSE,
    'cardinality' => '-1',
    'translatable' => FALSE,
    'settings' => array(
      'handler' => 'base',
      'target_type' => 'commerce_order',
      'handler_settings' => array(
        'target_bundles' => array('commerce_order'),
        'sort' => array(
          'type' => 'property',
          'property' => 'order_id',
          'direction' => 'ASC',
        ),
      ),
    ),
  );
  $fields[COMMERCE_REFUND_ORDER_FIELD]['instances'][] = array(
    'entity_type' => 'commerce_order',
    'bundles' => array('commerce_order'),
    'label' => t('Refund order'),
    'description' => t('On user order this points to all refund orders created. On refund orders it points to a single user order.'),
    'required' => FALSE,
    'widget' => array(
      'type' => 'entityreference_autocomplete',
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
    'settings' => array(),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'entityreference_label',
        'settings' => array(
          'link' => FALSE,
        ),
        'module' => 'entityreference',
        'weight' => 0,
      ),
    ),
  );

  // Create a refund entityreference on message_commerce_refund entity bundle.
  $fields['message_commerce_refund']['field'] = array (
    'type' => 'entityreference',
    'module' => 'entityreference',
    'cardinality' => '1',
    'translatable' => FALSE,
    'settings' => array(
      'target_type' => 'commerce_order',
      'handler' => 'base',
      'handler_settings' => array(
        'target_bundles' => array(),
        'sort' => array(
          'type' => 'property',
          'property' => 'order_id',
          'direction' => 'ASC',
        ),
      ),
    ),
    'locked' => TRUE,
  );
  $fields['message_commerce_refund']['instances'][] = array(
    'entity_type' => 'message',
    'bundles' => array('commerce_order_refunded'),
    'label' => 'Refund Order',
    'required' => TRUE,
    'widget' => array(
      'type' => 'entityreference_autocomplete',
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
    'settings' => array(),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'entityreference_label',
        'settings' => array(
          'link' => FALSE,
        ),
        'module' => 'entityreference',
        'weight' => 0,
      ),
    ),
  );

  // Add the commerce order field created by commerce_message to the new 
  // message type as well.
  $field_message_order = field_info_instance('message', 'message_commerce_order', 'commerce_order_created');
  $field_message_order['bundles'] = array('commerce_order_refunded');
  $fields['message_commerce_order']['instances'][] = $field_message_order;


  // Create the missing fields.
  foreach ($fields as $field_name => $info) {
    if (!empty($info['field'])) {
      $field = $info['field'];
      $field += array(
        'field_name' => $field_name,
      );
      if (!field_info_field($field_name)) {
        field_create_field($field);
      }
      else {
        field_update_field($field);
      }
    }

    foreach ($info['instances'] as $instance) {
      foreach ($instance['bundles'] as $bundle) {
        $instance['bundle'] = $bundle;
        unset($instance['bundles']);
        $instance['field_name'] = $field_name;
        if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
          field_create_instance($instance);
        }
        else {
          field_update_instance($instance);
        }
      }
    }
  }
}
